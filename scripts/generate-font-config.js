/**
 * Font Configuration Generator
 * 
 * This script converts TTF font files to base64 and generates a JavaScript
 * configuration file that can be loaded by PDFMake.
 * 
 * Usage: node scripts/generate-font-config.js
 */

const fs = require('fs');
const path = require('path');

// Configuration
const FONTS = [
    {
        name: 'Wingdings',  // Display name (for XSL-FO)
        fontName: 'wingdings',  // PDFMake font name (lowercase)
        normal: path.join(__dirname, '../assets/wingding.ttf')
    }
];

const OUTPUT_FILE = path.join(__dirname, '../lib/custom-fonts.js');

/**
 * Convert a font file to base64
 */
function fontToBase64(fontPath) {
    const fontBuffer = fs.readFileSync(fontPath);
    return fontBuffer.toString('base64');
}

/**
 * Generate the font configuration JavaScript file
 */
function generateFontConfig() {
    console.log('üîß Generating font configuration...\n');
    
    const vfsFonts = {};
    const fontDefinitions = {};
    
    FONTS.forEach(font => {
        console.log(`üìù Processing font: ${font.name}`);
        
        // Use lowercase fontName for PDFMake, fallback to lowercase name
        const pdfMakeFontName = font.fontName || font.name.toLowerCase();
        fontDefinitions[pdfMakeFontName] = {};
        
        ['normal', 'bold', 'italics', 'bolditalics'].forEach(style => {
            if (font[style]) {
                console.log(`   - ${style}: ${path.basename(font[style])}`);
                const base64 = fontToBase64(font[style]);
                const filename = `${pdfMakeFontName}-${style}.ttf`;
                vfsFonts[filename] = base64;
                fontDefinitions[pdfMakeFontName][style] = filename;
            } else if (style === 'normal') {
                // Must have at least normal style
                throw new Error(`Font ${font.name} must have a 'normal' style defined`);
            } else {
                // Use normal style for missing variants (reference same file, no duplication)
                console.log(`   - ${style}: (referencing normal)`);
                const normalFilename = `${pdfMakeFontName}-normal.ttf`;
                fontDefinitions[pdfMakeFontName][style] = normalFilename;
            }
        });
        
        console.log(`‚úÖ ${font.name} processed (PDFMake name: ${pdfMakeFontName})\n`);
    });
    
    // Generate the JavaScript file
    // Keep quotes for vfsFonts keys (they contain hyphens)
    // Remove quotes only for fontDefinitions keys (simple identifiers)
    const vfsFontsStr = JSON.stringify(vfsFonts, null, 2);
    const customFontsStr = JSON.stringify(fontDefinitions, null, 2).replace(/"([^"]+)":/g, '$1:');
    
    const output = `/**
 * Custom Font Configuration
 * 
 * This file contains custom fonts converted to base64 for use with PDFMake.
 * Generated automatically by scripts/generate-font-config.js
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 */

// Virtual file system for custom fonts
const customVfsFonts = ${vfsFontsStr};

// Font definitions for PDFMake (includes standard + custom fonts)
const customFonts = {
    // Standard PDFMake fonts (use built-in VFS)
    Roboto: {
        normal: 'Roboto-Regular.ttf',
        bold: 'Roboto-Medium.ttf',
        italics: 'Roboto-Italic.ttf',
        bolditalics: 'Roboto-MediumItalic.ttf'
    },
    Courier: {
        normal: 'Courier',
        bold: 'Courier-Bold',
        italics: 'Courier-Oblique',
        bolditalics: 'Courier-BoldOblique'
    },
    Helvetica: {
        normal: 'Helvetica',
        bold: 'Helvetica-Bold',
        italics: 'Helvetica-Oblique',
        bolditalics: 'Helvetica-BoldOblique'
    },
    Times: {
        normal: 'Times-Roman',
        bold: 'Times-Bold',
        italics: 'Times-Italic',
        bolditalics: 'Times-BoldItalic'
    },
    // Custom fonts
    ...${customFontsStr}
};

// Export for both browser and Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { customVfsFonts, customFonts };
}

if (typeof window !== 'undefined') {
    window.customVfsFonts = customVfsFonts;
    window.customFonts = customFonts;
}

console.log('‚úÖ Custom fonts loaded:', Object.keys(customFonts));
`;
    
    fs.writeFileSync(OUTPUT_FILE, output);
    console.log(`‚úÖ Font configuration written to: ${OUTPUT_FILE}`);
    console.log(`üì¶ Total fonts: ${Object.keys(fontDefinitions).length}`);
    console.log(`üìä Total font files: ${Object.keys(vfsFonts).length}`);
    console.log(`üíæ Output size: ${(output.length / 1024).toFixed(2)} KB`);
}

// Run the generator
try {
    generateFontConfig();
    console.log('\n‚úÖ Font configuration generated successfully!');
} catch (error) {
    console.error('\n‚ùå Error generating font configuration:', error.message);
    process.exit(1);
}

